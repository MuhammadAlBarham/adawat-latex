
\documentclass[a4]{article}
\usepackage{arabtex}
\usepackage{textcomp}
\usepackage{utf8}
\usepackage{pdfpages}
\usepackage{xcolor}
\usepackage{todonotes}
\usepackage{booktabs}
\usepackage{hyperref}
\setcode{utf8}
\title{Autocorrection Of Arabic Common Errors For Large Text Corpus: QALB-2014 Shared Task}
\begin{document}
\maketitle
\transtrue


\section{Abstract}

Automatic correction of misspelled words means offering a single
proposal to correct a mistake, for example, switching two letters,
omitting letter or a key press. In Arabic, there are some typical common
errors based on letter errors, such as confusing in the form of Hamza
 \RL{همزة} , confusion between Daad  \RL{ضاد}  and Za  \RL{ظاء} , and the omission dots with
Yeh  \RL{ياء}  and Teh  \RL{تاء}  .

So we propose in this paper a system description of a mechanism for
automatic correction of common errors in Arabic based on rules, by using
two methods, a list of words and regular expressions.



 \section{ Introduction}


Spell check is the most important functions of correct writing, whether
manual or assisted by programs, it detects errors and suggests
corrections.

Conventional spelling checkers detect typing errors simply by comparing
each token of a text against a dictionary of words that are known to be
correctly spelled.

Any token that matches an element of the dictionary, possibly after some
minimal morphological analysis, is deemed to be correctly spelled; any
token that matches no element is flagged as a possible error, with
near-matches displayed as suggested corrections (Hirst, 2005).


\section{  Auto-correction}


An auto-correction mechanism watches out for certain predefined
``errors'' as the user types, replacing them with a ``correction'' and
giving no indication or warning of the change.

Such mechanisms are intended for undoubted typing errors for which only
one correction is plausible, such as correcting accomodate* to
accommodate ***(Hirst, 2005).

In Arabic, we found some common errors types, like the confusion in
Hamza forms, e.g. the word Isti'maal ( \RL{إستعمال} *) must be written by a
simple Alef, not Alef with Hamza below. This error can be classed as a
kind of errors and not a simple error in a word ***(Shaalan, 2003, Habash,
2011).

Spellchecking and autocorrection are widely applicable for tasks such
as:

\begin{itemize}
\item
  word- processing
\item
  Post-processing Optical Character Recognition.
\item
  Correction of large content site like Wikipedia.
\item
  Correction of corpora.
\item
  Search queries
\item
  Mobile auto-completion and autocorrection programs.
\end{itemize}

  \section{Related works}

Current works on autocorrection in Arabic are limited; there are some
works on improving spell checking to select one plausible correction
especially for correcting large texts like corpus. In English, Deorowicz
(2005) had worked on correcting spelling errors by modeling their
causes, he propose to classify mistakes causes in order to improve
replacement suggestion.

In Arabic, Microsoft office provides an autocorrect word list of common
errors, which is limited and not studied.

Google search engine had improved its search algorithm for Arabic query
by using some rules on letters which can be mistaken, for better words
split based on letters properties, for example if we type
{[} \RL{رااائعةالجماال} {]}*, the engine can give results for ``Rae'at
alJamaal'' {[} \RL{رااائعةالجماال} {]}*and {[} \RL{رائعة الجمال} {]}. , some other
example: ``Altarbia wa alta'lim'', ``Google'', ``Jaridat alahraam'',
{[} \RL{جريدةالاهرام} {]}*, {[} \RL{قووقل} {]}* , {[} \RL{التربيةوالتعلييم} {]}*.

Google Arabia says in its blog, that ``this improvement which looked
very simple, enhance search in Arabic language by 10\% which is in real
an impressive change'' *******(Hammad, 2010).

\begin{enumerate}
\def\labelenumi{rabic{enumi}.}
\item
  Our approach
\end{enumerate}

We have launched our first project about autocorrection for a special
objective to enhance Wikipedia article spell checking. Wikipedia is a
large text database written by thousands of persons with different
language skill levels and with multiple origins, which make a lot of
mistakes. The idea is to provide an automatic script which can detect
common errors by using regular expressions and a word replacement
listootnote{The script is named AkhtaBot, which is applied to arabic
  wikipedia, the Akhtabot is available on
  \url{http://ar.wikipedia.org/wiki/ \RL{مستخدم} :AkhtaBot}
  }

This objective can be extended to answer other needs for users in
office, chat, tweets, etc.

The idea is to use a non-ambiguous regular expressions or word list, to
prevent common errors, while writing or as an automated script for large
texts data.

As we say above, our method is based on:

- Regular expressions which can be used to identify errors and give one
replacement.

- Replacement list which contains the misspelled word, and the exact
correction for this case, this way is used for cases which can't be
modeled as regular expression.

\subsection{  Regular Expressions}

We use regular expression pattern to detect.errors in words by using
word weight (Wazn) and affixes. For example we can detect that words
with the weight INFI'AL  \RL{انفعال}  must be written by Hamza Wasl, and we
consider the form  \RL{إنفعال} * as wrong. Then, we represent all forms of this
weight with all possible affixes.

\begin{table}
\begin{tabular}[c]{@{}lll@{}}
\toprule
prefixes & Weight & Suffixes\tabularnewline
 \RL{ب، ال، و، ف} ... &  \RL{انفعال}  &  \RL{ين، ات، ي، ان، ه، ها، هما، ك،
كما} ...\tabularnewline
\bottomrule
\end{tabular}
\label{affix2:table}
\caption{Infi'aal wheight with its affixation }
\end{table}


\begin{table}
\begin{tabular}[c]{@{}l@{}}
\toprule
\textbf{\# rules for  \RL{انفعال} }\tabularnewline
ur'\textbackslash{}b( \RL{و} \textbar{} \RL{ف} \textbar{})( \RL{ك} \textbar{} \RL{ب} \textbar{})( \RL{ال} \textbar{}) \RL{إن} (\textbackslash{}w\textbackslash{}w) \RL{ا} (\textbackslash{}w)( \RL{ي} \textbar{})( \RL{ين} \textbar{} \RL{ات} \textbar{} \RL{ة} \textbar{} \RL{تين} \textbar{})\textbackslash{}b'\tabularnewline
ur'\textbackslash{}b( \RL{و} \textbar{} \RL{ف} \textbar{})( \RL{لل} \textbar{}) \RL{إن} (\textbackslash{}w\textbackslash{}w) \RL{ا} (\textbackslash{}w)( \RL{ي} \textbar{})( \RL{ين} \textbar{} \RL{ات} \textbar{} \RL{تين} \textbar{} \RL{ة} \textbar{})\textbackslash{}b'\tabularnewline
ur'\textbackslash{}b( \RL{و} \textbar{} \RL{ف} \textbar{})( \RL{ك} \textbar{} \RL{ب} \textbar{} \RL{ل} \textbar{}) \RL{إن} (\textbackslash{}w\textbackslash{}w) \RL{ا} (\textbackslash{}w)( \RL{ي} \textbar{})( \RL{هما} \textbar{} \RL{كما} \textbar{} \RL{هم} \textbar{} \RL{كم} \textbar{} \RL{هن} \textbar{} \RL{كن} \textbar{} \RL{نا} \textbar{} \RL{ه} \textbar{} \RL{ك} \textbar{} \RL{ها} \textbar{} \RL{تهما} \textbar{} \RL{تكما} \textbar{} \RL{تهم} \textbar{} \RL{تكم} \textbar{} \RL{تهن} \textbar{} \RL{تكن} \textbar{} \RL{تنا} \textbar{} \RL{ته} \textbar{} \RL{تها} \textbar{} \RL{تك} \textbar{} \RL{اتهما} \textbar{} \RL{اتكما} \textbar{} \RL{اتهم} \textbar{} \RL{اتكم} \textbar{} \RL{اتهن} \textbar{} \RL{اتكن} \textbar{} \RL{اتنا} \textbar{} \RL{اته} \textbar{} \RL{اتها} \textbar{} \RL{اتك} \textbar{})\textbackslash{}b'\tabularnewline
ur'\textbackslash{}b( \RL{و} \textbar{} \RL{ف} \textbar{})( \RL{ال} \textbar{}) \RL{إن} (\textbackslash{}w\textbackslash{}w) \RL{ا} (\textbackslash{}w)( \RL{ي} \textbar{})( \RL{ين} \textbar{} \RL{ان} \textbar{} \RL{تين} \textbar{} \RL{تان} \textbar{} \RL{ون} \textbar{})\textbackslash{}b'\tabularnewline
ur'\textbackslash{}b( \RL{و} \textbar{} \RL{ف} \textbar{}) \RL{إن} (\textbackslash{}w\textbackslash{}w) \RL{ا} (\textbackslash{}w)( \RL{ي} \textbar{})( \RL{ًا} \textbar{} \RL{اً} \textbar{} \RL{ا} \textbar{})\textbackslash{}b'\tabularnewline
\bottomrule
\end{tabular}
\label{infial2:table}
\caption{Rules for the Infi'al weight in all forms}
\end{table}




By regular expressions we have modeled the following cases (cf. table ef{regex2:table} ):

\begin{itemize}
\item
  words with weights (infi'al and ifti'al  \RL{انفعال وافتعال} )
\item
  Words with Alef Maksura followed by Hamza, for example  \RL{سئ}  will be
  corrected ad  \RL{سيء} .
\item
  words with Teh Marbuta misplaced, like  \RL{مدرسةالعلم}  to be corrected to
   \RL{مدرسة العلم} .
\end{itemize}

\begin{table} \begin{tabular}[c]{@{}ll@{}}
\toprule
\textbf{Regular expression } & \textbf{replacement}\tabularnewline
\textbf{\# removing kashida (Tatweel)} &\tabularnewline
ur'({[}\textbackslash{}u0621-\textbackslash{}u063F\textbackslash{}u0641-\textbackslash{}u064A{]})\textbackslash{}u0640+({[}\textbackslash{}u0621-\textbackslash{}u063F\textbackslash{}u0641-\textbackslash{}u064A{]})'
& ur'\textbackslash{}1\textbackslash{}2'\tabularnewline
\textbf{\# rules for  \RL{انفعال} } &\tabularnewline
ur'\textbackslash{}b( \RL{و} \textbar{} \RL{ف} \textbar{})( \RL{ك} \textbar{} \RL{ب} \textbar{})( \RL{ال} \textbar{}) \RL{إن} (\textbackslash{}w\textbackslash{}w) \RL{ا} (\textbackslash{}w)( \RL{ي} \textbar{})( \RL{ين} \textbar{} \RL{ات} \textbar{} \RL{ة} \textbar{} \RL{تين} \textbar{})\textbackslash{}b'
&
ur'\textbackslash{}1\textbackslash{}2\textbackslash{}3 \RL{ان} \textbackslash{}4 \RL{ا} \textbackslash{}5\textbackslash{}6\textbackslash{}7'\tabularnewline
ur'\textbackslash{}b( \RL{و} \textbar{} \RL{ف} \textbar{})( \RL{لل} \textbar{}) \RL{إن} (\textbackslash{}w\textbackslash{}w) \RL{ا} (\textbackslash{}w)( \RL{ي} \textbar{})( \RL{ين} \textbar{} \RL{ات} \textbar{} \RL{تين} \textbar{} \RL{ة} \textbar{})\textbackslash{}b'
&
ur'\textbackslash{}1\textbackslash{}2 \RL{ان} \textbackslash{}3 \RL{ا} \textbackslash{}4\textbackslash{}5\textbackslash{}6'\tabularnewline
ur'\textbackslash{}b( \RL{و} \textbar{} \RL{ف} \textbar{})( \RL{ك} \textbar{} \RL{ب} \textbar{} \RL{ل} \textbar{}) \RL{إن} (\textbackslash{}w\textbackslash{}w) \RL{ا} (\textbackslash{}w)( \RL{ي} \textbar{})( \RL{هما} \textbar{} \RL{كما} \textbar{} \RL{هم} \textbar{} \RL{كم} \textbar{} \RL{هن} \textbar{} \RL{كن} \textbar{} \RL{نا} \textbar{} \RL{ه} \textbar{} \RL{ك} \textbar{} \RL{ها} \textbar{} \RL{تهما} \textbar{} \RL{تكما} \textbar{} \RL{تهم} \textbar{} \RL{تكم} \textbar{} \RL{تهن} \textbar{} \RL{تكن} \textbar{} \RL{تنا} \textbar{} \RL{ته} \textbar{} \RL{تها} \textbar{} \RL{تك} \textbar{} \RL{اتهما} \textbar{} \RL{اتكما} \textbar{} \RL{اتهم} \textbar{} \RL{اتكم} \textbar{} \RL{اتهن} \textbar{} \RL{اتكن} \textbar{} \RL{اتنا} \textbar{} \RL{اته} \textbar{} \RL{اتها} \textbar{} \RL{اتك} \textbar{})\textbackslash{}b'
&
ur'\textbackslash{}1\textbackslash{}2 \RL{ان} \textbackslash{}3 \RL{ا} \textbackslash{}4\textbackslash{}5\textbackslash{}6'\tabularnewline
ur'\textbackslash{}b( \RL{و} \textbar{} \RL{ف} \textbar{})( \RL{ال} \textbar{}) \RL{إن} (\textbackslash{}w\textbackslash{}w) \RL{ا} (\textbackslash{}w)( \RL{ي} \textbar{})( \RL{ين} \textbar{} \RL{ان} \textbar{} \RL{تين} \textbar{} \RL{تان} \textbar{} \RL{ون} \textbar{})\textbackslash{}b'
&
ur'\textbackslash{}1\textbackslash{}2 \RL{ان} \textbackslash{}3 \RL{ا} \textbackslash{}4\textbackslash{}5\textbackslash{}6'\tabularnewline
ur'\textbackslash{}b( \RL{و} \textbar{} \RL{ف} \textbar{}) \RL{إن} (\textbackslash{}w\textbackslash{}w) \RL{ا} (\textbackslash{}w)( \RL{ي} \textbar{})( \RL{ًا} \textbar{} \RL{اً} \textbar{} \RL{ا} \textbar{})\textbackslash{}b'
&
ur'\textbackslash{}1 \RL{ان} \textbackslash{}2 \RL{ا} \textbackslash{}3\textbackslash{}4\textbackslash{}5'\tabularnewline
\bottomrule
\end{tabular}
 \label{regex2:table}
 \caption{Rules expressed by regular expressions}
 \end{table}

\subsection{Wordlist}

Most common mistakes cannot be represented as regular expressions, such
as errors in the confusion between the Dhad and Za, and omitted dots on
Teh and Yeh, such as in the  \RL{المكتبه}  * and * \RL{فى} , So we resort to build a
list of common misspelled words.

To build an autocorrect word list, we suppose to use statistical
extraction from a corpus, but we think that's not possible in Arabic
language, because the common mistakes can have certain pattern and
style, for example, people who can't differentiate between Dhad and Zah,
make mistakes in all words containing these letters. Mistakes on Hamzat
are not limited to some words, but can be typical and occur according to
letters not especially for some words.

For this reason, we propose to build a word list based on *****Attia (2012)
spell-checking word list, by generating errors for common letters
errors, then filter resulted word list to obtain an autocorrect word
list without ambiguity.

\textbf{How to build generated word list:}
\begin{itemize}

\item 1- take a correct word list

\item 2- select candidate words:

\begin{itemize}
\item
  words start by Hamza Qat' or Wasl.
\item
  words end by Yeh or Teh marbuta.
\item
  Words contain Dhad or Zah.
\end{itemize}

\item 3- Make errors on words by replacing candidate letters by errors.

\item  4- Spell check the wordlist, and eliminate correct words, because some
modified words can be correct, for example, if we take the word  \RL{ضلَ} 
Dhalla  \RL{،}  then modify it to  \RL{ظل}  Zalla , the modified word exists in the
dictionary, then we exclude it from autocorrect wordlist, and we keep
only misspelled modified words.

\end{itemize}

\begin{table} \begin{tabular}[c]{@{}llll@{}}
\toprule
words & modified & Spellcheck & Add to word list\tabularnewline
 \RL{بمكتبة}  &  \RL{بمكتبه}  & True &\tabularnewline
 \RL{المكتبة}  &  \RL{المكتبه}  & False &  \RL{المكتبه} \tabularnewline
 \RL{بالمكتبة}  &  \RL{بالمكتبه}  & False &  \RL{بالمكتبه} \tabularnewline
 \RL{وبالمكتبة}  &  \RL{وبالمكتبه}  & False &  \RL{وبالمكتبه} \tabularnewline
 \RL{ومكتبة}  &  \RL{ومكتبه}  & True &\tabularnewline
\bottomrule
\end{tabular} \label{sample_err:table} \caption{Example of word errors generating}\end{table}


For example, if we have the word  \RL{إسلام}  Islam, it can be written as  \RL{اسلام} 
Islam by mistake because that have the same pronociation. We can
generate errors on words by appling some rule:

\begin{itemize}
\item
  Alef with Hamza above  \RL{همزة قطع}  \textless{}=\textgreater{} Alef  \RL{همزة
  وصل} 
\item
  Alef with Hamza below  \RL{همزة تحت الألف}  \textless{}=\textgreater{} Alef
   \RL{همزة وصل} 
\item
  Dhah  \RL{ض}  \textless{}=\textgreater{} Zah  \RL{ظ} 
\item
  The Marbuta  \RL{ة}  \textless{}=\textgreater{} Heh  \RL{هـ} 
\item
  Yeh  \RL{ي}  \textless{}=\textgreater{} Alef Maksura  \RL{ى} 
\end{itemize}

We suppose that we have the following word list, this list is chosen to
illustrate some cases.

 \RL{إسلام

ظلام

ظل

مكتبة

المكتبة

إعلام} 

For every word, we map an mistaken word, then we get a list like this:

Word candidate word

\begin{quote}
 \RL{إسلام اسلام

ظلام ضلام

ظل ضل

مكتبة مكتبه

المكتبة المكتبه

إعلام اعلام} 
\end{quote}

We note that some candidate words are right, then we remove it, and the
remaining words consititute the autocorrect wordlist

Word candidate word

\begin{quote}
 \RL{إسلام اسلام

ظلام ضلام

المكتبة المكتبه

إعلام اعلام} 
\end{quote}

The following list (cf. Table ef{error_cat:table}) shows the number of words in each type of errors,

\begin{table} \begin{tabular}[c]{@{}ll@{}}
\toprule
\textbf{Words count } & \textbf{Error type}\tabularnewline
101853 & words started by Hamza Qat'\tabularnewline
700198 & words ended by Yeh\tabularnewline
152210 & words ended by Teh marbuta\tabularnewline
396506 & words contained Dhad\tabularnewline
94395 & words contained Zah\tabularnewline
1445162 & \textbf{Total }\tabularnewline
\bottomrule
\end{tabular} \label{error_cat:table} \caption{Errors categories in wordlist}\end{table}


The large number of words is due to the multiple forms per word, which
avoids the morphological analysis, in such programs.

\subsection{Customized Wordlist}

Large number of replacement cases in generated autocorrect list
encourages us to make an improvement to generate customized list for
specific cases in order to reduce list length.

We apply the following algorithm to generate customized list from large
text data set:

\begin{itemize}
\item
  Extract misspelled words from dataset by using Hunspell spellchecker.
\item
  Generate suggestions given by Hunspell
\item
  Study suggestions to choose the best one in hypothesis that words have
  common errors on letters according to modified letters.
\item
  Exclude ambiguous cases.
\end{itemize}

The automatically generated word list is used to autocorrect the dataset
instead of default word list

\section{  Tools and resources}

In our program we have used the following resources:

\begin{itemize}
\item
  Arabic word list for spell checking containing 9 million Arabic words,
  from Attia works (2012).
\item
  a simple Python script to generate errors.
\item
  Hunspell spellchecker program with Ayaspell dictionary (Hadjir 2009,
  Zerrouki, 2013). and Attia spellchecking wordlist (2012).
\item
  our autocorrect program named Ghalatawiootnote{The Ghalatawi
    autocorrect program is available as an open source program at
    \url{http://ghalatawi.sourceforge.net/}
    }
    
( cf. a screenshot on Figure ef{ghlat:fig})  \RL{٫} 
\item
  A script to select best suggestion from Hunspell correction
  suggestions to generate customized autocorrect list.
\end{itemize}

\textbf{Example }

\begin{figure}
\centering
\includegraphics[width=0.7\linewidth]{images/ghlat.png}
\caption{Ghalatawi program, autocorrection example}
\label{ghlat:fig}
\end{figure}

\section{Evaluation}

In order to evaluate the performance of automatic correction program, we
used the data set provided in the shared task test (Behrang, 2014).
After that autocorrect the texts by Galatawi program based on regular
expressions and a wordlist.

For this evaluation we have used two autocorrect word lists:

- a generic word list generated from Attia wordlist, this wordlist is
used for general purposes. This word list is noted in evaluation as
``STANDARD''.

- a customized wordlist based on dataset, by generating a special word
list according to data set, in order to improve auto correction and
avoid unnecessary replacement. this wordlist is noted in evaluation as
``CUSTOMIZED''.

The customized autocorrect word list is built in the same way as
STANDARD, by replacing the source dictionary by misspelled words from
QALB corpus \todo{ref} \cite{zaghouani2014large}.

\paragraph{How customized list is built from dataset?}
\begin{enumerate}
\item
1- Hunspell detects 3463 unrepeated misspelled word in the dataset, like

 \RL{للامريكيين} *,  \RL{الاف}  *

 \RL{اإثيوبي

, ااسف

االشعب

االقاتل

, االمتظاهرين

, االمدعو

, االمدنين, االمرسوم} 

\item
2- Hunspell generates suggestions for misspelled words, like

@(\#) International Ispell Version 3.2.06 (but really Hunspell 1.3.2)

\&  \RL{للامريكيين 1 4: للأمريكيين} 

\&  \RL{الاف 15 1: الأف, الآف, ألاف, ألاق, ألأف, ألآف, إلاف, إلاق, آلاف,
آلأف, آلآف, لافا, للاف, تلاف, غلاف} 

\item 
3- the script can select all words with one suggestion, and words with
near suggestion as a common error. The script has select only 1727 non
ambiguous case (not repeated).

The customized autocorrected list is used in test as CUSTOMIZED.

We got the following results (cf. Table ef{train2:table}) by using the M2 scorer
\todo{ref}\cite{dahlmeier2012better}:
\end{enumerate}

\begin{table} \begin{tabular}[c]{@{}lll@{}}
\toprule
& STANDARD & CUSTOMIZED\tabularnewline
CORRECT EDITS & 1847 & 3798\tabularnewline
PROPOSED EDITS & 2722 & 5144\tabularnewline
GOLD EDITS & 16659 & 16659\tabularnewline
Precision & 0.6785 & 0.7383\tabularnewline
Recall & 0.1109 & 0.2280\tabularnewline
F\_1.0 & 0.1906 & 0.3484\tabularnewline
\bottomrule
\end{tabular} \label{train2:table} \caption{Training dataset evaluation}\end{table}


We note that the customized wordlist give us precision and recall better
than the use of standard wordlist.

\section{Conclusion}

AutoCorrect for words is to propose a one correction for common errors
in writing.

In Arabic there are the following common mistakes: failure to
differentiate between Hamza Wasl and Qat', confusion between the Dhah
and Zah, and the omission of dots on Teh and under Yeh.

We have tried in this paper to find a way to adjust these errors
automatically without human review, using a list of words and regular
expressions to detect and correct errors.

This technique has been tried on the QALB corpus and gave mentioned
results.

\bibliographystyle{plain}
\bibliography{sahsoh}

%
%Hadjir \RL{،} I \RL{٫}  "Towards an open source arabic spell checker'', magister in
%Natural language processing, scientific and technique research center to
%arabic language development, 2009.
%
%Zerrouki T, "Improving the spell checking dictionary by users feedback"
%A meeting of experts check the spelling and grammar and composition
%automation, Higher Institute of Applied Science and Technology of
%Damascus, the Arab Organization for Education, Science and Culture,
%Damascus, April 18 to 20, 2011.
%
%Deorowicz S \RL{٫} , Marcin G. Ciura, Correcting Spelling Errors By Modeling
%Their Causes. Int. J. Appl. Math. Comput. Sci., 2005, Vol. 15, No. 2,
%275--285
%
%Hammad M \RL{٫}  and Mohamed Alhawari, recent improvement of arabic language
%search, Google Arabia Blog, Google company, 2010
%http://google-arabia.blogspot.com/.
%
%K Shaalan, A Allah, Towards automatic spell checking for Arabic\ldots{}
%- Conference on Language Engineering, 2003 - claes.sci.eg
%
%Graeme Hirst And Alexander Budanitsky, Correcting real-word spelling
%errors by restoring lexical cohesion, Natural Language Engineering 11
%(1): 87--111, 2005 Cambridge University Press
%
%Nizar Habash, Ryan M. Roth, Using Deep Morphology to Improve Automatic
%Error Detection in Arabic Handwriting Recognition, ACL, page 875-884.
%The Association for Computer Linguistics, (2011)
%
%Behrang Mohit, Alla Rozovskaya,~Wajdi Zaghouani, Ossama Obeid, and Nizar
%Habash , 2014.~The First shared Task on Automatic Text Correction for
%Arabic.
%
%Wajdi Zaghouani, Behrang Mohit, Nizar Habash, Ossama Obeid, Nadi Tomeh,
%Alla Rozovskaya, Noura Farra, Sarah Alkuhlani, and Kemal Oflazer. 2014.
%Large Scale Arabic Error Annotation: Guidelines and Framework. In
%Proceedings of the Ninth International Conference on Language Resources
%and Evaluation (LREC'14), ~Reykjavik, Iceland.
%
%Golding and Roth. ``A Winnow based approach to Context-Sensitive
%Spelling Correction''. 1999.
%
%Dahlmeier, Daniel and Ng, Hwee Tou. 2012. Better evaluation for
%grammatical error correction. In Proceedings of NAACL.
%
%Habash, Nizar Y. "Introduction to Arabic natural language processing."
%Synthesis Lectures on Human Language Technologies 3.1 (2010): 1-187

\end{document}


